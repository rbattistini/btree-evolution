kotlin version: 2.0.0
error message: Incremental compilation failed: The following FqNames can't be derived from DirtyData.dirtyLookupSymbols: it.evolution.simulation.btree.constraint.BTConstraintReparation.
DirtyData = DirtyData(dirtyLookupSymbols=[LookupSymbol(name=RandomBTGenerator, scope=it.evolution.simulation.btree.random), LookupSymbol(name=Tool, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.random.RandomBTGenerator), LookupSymbol(name=Rule, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion), LookupSymbol(name=randomTree, scope=it.evolution.simulation.btree.random.RandomBTGenerator), LookupSymbol(name=Companion, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation), LookupSymbol(name=repair, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion), LookupSymbol(name=BTRules, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation), LookupSymbol(name=BTConstraintCheck, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=BTTools, scope=it.evolution.simulation.btree.constraint)], dirtyClassesFqNames=[it.evolution.simulation.btree.random.RandomBTGenerator, it.evolution.simulation.btree.constraint.BTRules, it.evolution.simulation.btree.constraint.BTConstraintReparation, it.evolution.simulation.btree.constraint.Tool, it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion, it.evolution.simulation.btree.constraint.BTConstraintCheck, it.evolution.simulation.btree.constraint.Rule, it.evolution.simulation.btree.constraint.BTTools], dirtyClassesFqNamesForceRecompile=[])
java.lang.IllegalStateException: The following FqNames can't be derived from DirtyData.dirtyLookupSymbols: it.evolution.simulation.btree.constraint.BTConstraintReparation.
DirtyData = DirtyData(dirtyLookupSymbols=[LookupSymbol(name=RandomBTGenerator, scope=it.evolution.simulation.btree.random), LookupSymbol(name=Tool, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.random.RandomBTGenerator), LookupSymbol(name=Rule, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion), LookupSymbol(name=randomTree, scope=it.evolution.simulation.btree.random.RandomBTGenerator), LookupSymbol(name=Companion, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation), LookupSymbol(name=repair, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion), LookupSymbol(name=BTRules, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=<SAM-CONSTRUCTOR>, scope=it.evolution.simulation.btree.constraint.BTConstraintReparation), LookupSymbol(name=BTConstraintCheck, scope=it.evolution.simulation.btree.constraint), LookupSymbol(name=BTTools, scope=it.evolution.simulation.btree.constraint)], dirtyClassesFqNames=[it.evolution.simulation.btree.random.RandomBTGenerator, it.evolution.simulation.btree.constraint.BTRules, it.evolution.simulation.btree.constraint.BTConstraintReparation, it.evolution.simulation.btree.constraint.Tool, it.evolution.simulation.btree.constraint.BTConstraintReparation.Companion, it.evolution.simulation.btree.constraint.BTConstraintCheck, it.evolution.simulation.btree.constraint.Rule, it.evolution.simulation.btree.constraint.BTTools], dirtyClassesFqNamesForceRecompile=[])
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.toProgramSymbols(ClasspathChangesComputer.kt:381)
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.computeFineGrainedKotlinClassChanges(ClasspathChangesComputer.kt:281)
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.computeKotlinClassChanges(ClasspathChangesComputer.kt:181)
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.computeClassChanges(ClasspathChangesComputer.kt:154)
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.computeChangedAndImpactedSet(ClasspathChangesComputer.kt:104)
	at org.jetbrains.kotlin.incremental.classpathDiff.ClasspathChangesComputer.computeClasspathChanges(ClasspathChangesComputer.kt:72)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.calculateSourcesToCompileImpl(IncrementalJvmCompilerRunner.kt:194)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.calculateSourcesToCompile(IncrementalJvmCompilerRunner.kt:132)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.calculateSourcesToCompile(IncrementalJvmCompilerRunner.kt:62)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally$lambda$9$compile(IncrementalCompilerRunner.kt:225)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally(IncrementalCompilerRunner.kt:267)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:120)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:676)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1661)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:598)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:844)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:721)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:720)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)


